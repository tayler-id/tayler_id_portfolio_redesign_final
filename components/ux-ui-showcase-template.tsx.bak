'use client'

import React, { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  Palette, 
  Users, 
  Search, 
  Layout, 
  Figma, 
  Smartphone,
  Monitor,
  Tablet,
  Zap,
  Eye,
  MousePointer,
  ArrowRight,
  Play,
  ChevronLeft,
  ChevronRight,
  X
} from 'lucide-react'
import { ScrollReveal } from './animate-ui/scroll-reveal'
import { FloatingCard } from './animate-ui/floating-card'
import { MagneticButton } from './animate-ui/magnetic-button'
import { Button } from './ui/button'
import { cn } from '@/lib/utils'
import Image from 'next/image'

interface DesignAsset {
  id: string
  title: string
  type: 'wireframe' | 'mockup' | 'prototype' | 'component' | 'flow'
  device?: 'mobile' | 'tablet' | 'desktop'
  image: string
  description?: string
  annotations?: Array<{
    x: number // percentage
    y: number // percentage  
    title: string
    description: string
  }>
}

interface UserPersona {
  name: string
  role: string
  age: string
  goals: string[]
  painPoints: string[]
  image?: string
  quote: string
}

interface DesignProcess {
  phase: string
  icon: React.ComponentType<any>
  description: string
  deliverables: string[]
  duration?: string
}

interface DesignSystem {
  colors: {
    primary: string[]
    secondary: string[]
    neutral: string[]
  }
  typography: {
    headings: string
    body: string
    code: string
  }
  components: Array<{
    name: string
    description: string
    variants: number
    usage: string
  }>
}

interface UXUIShowcaseProps {
  // Project header
  title: string
  subtitle: string
  description: string
  
  // Research section
  research?: {
    title: string
    description: string
    methods: Array<{
      icon: React.ComponentType<any>
      title: string
      description: string
      insights: string[]
    }>
    personas?: UserPersona[]
  }
  
  // Design process
  process: {
    title: string
    description: string
    phases: DesignProcess[]
  }
  
  // Design assets/screens
  designs: {
    title: string
    description: string
    assets: DesignAsset[]
  }
  
  // Design system (optional)
  designSystem?: DesignSystem
  
  // Prototyping/interaction
  prototyping?: {
    title: string
    description: string
    interactions: Array<{
      title: string
      description: string
      video?: string
      gif?: string
    }>
  }
  
  // Testing/validation
  testing?: {
    title: string
    description: string
    methods: string[]
    results: Array<{
      metric: string
      improvement: string
      description: string
    }>
  }
}

export function UXUIShowcaseTemplate(props: UXUIShowcaseProps) {
  const {
    title,
    subtitle,
    description,
    research,
    process,
    designs,
    designSystem,
    prototyping,
    testing
  } = props
  const [selectedAsset, setSelectedAsset] = useState<DesignAsset | null>(null)
  const [selectedDevice, setSelectedDevice] = useState<'all' | 'mobile' | 'tablet' | 'desktop'>('all')
  const [selectedType, setSelectedType] = useState<'all' | DesignAsset['type']>('all')

  const deviceIcons = {
    mobile: Smartphone,
    tablet: Tablet,
    desktop: Monitor
  }

  const filteredAssets = designs.assets.filter(asset => {
    const deviceMatch = selectedDevice === 'all' || asset.device === selectedDevice
    const typeMatch = selectedType === 'all' || asset.type === selectedType
    return deviceMatch && typeMatch
  })

  return (
    <div className="min-h-screen bg-background">
      {/* Hero Section */}
      <section className="py-24 bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20">
        <div className="container mx-auto px-6">
          <ScrollReveal>
            <div className="text-center max-w-4xl mx-auto">
              <motion.div
                className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 border border-primary/20 text-primary font-medium text-sm mb-6"
                whileHover={{ scale: 1.05 }}
              >
                <Palette className="w-4 h-4" />
                UX/UI Design
              </motion.div>
              
              <h1 className="text-4xl lg:text-6xl font-bold font-display mb-6">
                {title}
              </h1>
              
              <p className="text-2xl font-medium text-muted-foreground mb-4">
                {subtitle}
              </p>
              
              <p className="text-xl text-muted-foreground leading-relaxed">
                {description}
              </p>
            </div>
          </ScrollReveal>
        </div>
      </section>

      {/* Research Section */}
      {research && (
        <section className="py-24">
          <div className="container mx-auto px-6">
            <ScrollReveal>
              <div className="text-center mb-16">
                <h2 className="text-3xl lg:text-4xl font-bold font-display mb-4">
                  {research.title}
                </h2>
                <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                  {research.description}
                </p>
              </div>
            </ScrollReveal>

            {/* Research Methods */}
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
              {research.methods.map((method, index) => (
                <ScrollReveal key={method.title} delay={index * 0.1}>
                  <FloatingCard className="h-full bg-background/50 backdrop-blur-sm border border-border/50">
                    <div className="p-6">
                      <div className="w-12 h-12 bg-primary/10 rounded-xl flex items-center justify-center mb-4">
                        <method.icon className="w-6 h-6 text-primary" />
                      </div>
                      <h3 className="text-xl font-bold mb-3">{method.title}</h3>
                      <p className="text-muted-foreground mb-4">{method.description}</p>
                      <div className="space-y-2">
                        <div className="text-sm font-medium text-primary">Key Insights:</div>
                        <ul className="space-y-1">
                          {method.insights.map((insight, i) => (
                            <li key={i} className="text-sm text-muted-foreground flex items-start gap-2">
                              <div className="w-1 h-1 bg-primary rounded-full mt-2 flex-shrink-0" />
                              {insight}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </FloatingCard>
                </ScrollReveal>
              ))}
            </div>

            {/* User Personas */}
            {research.personas && (
              <ScrollReveal delay={0.4}>
                <div className="mb-16">
                  <h3 className="text-2xl font-bold font-display text-center mb-8">User Personas</h3>
                  <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                    {research.personas.map((persona, index) => (
                      <FloatingCard key={persona.name} className="bg-background/50 backdrop-blur-sm border border-border/50">
                        <div className="p-6">
                          <div className="flex items-center gap-4 mb-4">
                            {persona.image && (
                              <div className="w-16 h-16 rounded-full overflow-hidden bg-muted">
                                <Image
                                  src={persona.image}
                                  alt={persona.name}
                                  width={64}
                                  height={64}
                                  className="w-full h-full object-cover"
                                />
                              </div>
                            )}
                            <div>
                              <h4 className="font-bold text-lg">{persona.name}</h4>
                              <p className="text-sm text-muted-foreground">{persona.role} • {persona.age}</p>
                            </div>
                          </div>
                          
                          <blockquote className="text-sm italic text-muted-foreground mb-4 p-3 bg-muted/50 rounded-lg">
                            "{persona.quote}"
                          </blockquote>
                          
                          <div className="space-y-3">
                            <div>
                              <div className="text-xs font-semibold text-green-600 mb-1">Goals</div>
                              <ul className="space-y-1">
                                {persona.goals.map((goal, i) => (
                                  <li key={i} className="text-xs text-muted-foreground">• {goal}</li>
                                ))}
                              </ul>
                            </div>
                            <div>
                              <div className="text-xs font-semibold text-red-600 mb-1">Pain Points</div>
                              <ul className="space-y-1">
                                {persona.painPoints.map((pain, i) => (
                                  <li key={i} className="text-xs text-muted-foreground">• {pain}</li>
                                ))}
                              </ul>
                            </div>
                          </div>
                        </div>
                      </FloatingCard>
                    ))}
                  </div>
                </div>
              </ScrollReveal>
            )}
          </div>
        </section>
      )}

      {/* Design Process Section */}
      <section className="py-24 bg-muted/30">
        <div className="container mx-auto px-6">
          <ScrollReveal>
            <div className="text-center mb-16">
              <h2 className="text-3xl lg:text-4xl font-bold font-display mb-4">
                {process.title}
              </h2>
              <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                {process.description}
              </p>
            </div>
          </ScrollReveal>

          <div className="max-w-6xl mx-auto">
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
              {process.phases.map((phase, index) => (
                <ScrollReveal key={phase.phase} delay={index * 0.1}>
                  <FloatingCard className="h-full bg-background/50 backdrop-blur-sm border border-border/50">
                    <div className="p-6 text-center">
                      {/* Phase Number */}
                      <div className="w-12 h-12 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-bold text-lg mx-auto mb-4">
                        {index + 1}
                      </div>
                      
                      {/* Phase Icon */}
                      <div className="w-16 h-16 bg-primary/10 rounded-xl flex items-center justify-center mx-auto mb-4">
                        <phase.icon className="w-8 h-8 text-primary" />
                      </div>
                      
                      <h3 className="text-lg font-bold mb-3">{phase.phase}</h3>
                      <p className="text-sm text-muted-foreground mb-4">{phase.description}</p>
                      
                      {phase.duration && (
                        <div className="text-xs text-primary font-medium mb-3">
                          ⏱️ {phase.duration}
                        </div>
                      )}
                      
                      <div>
                        <div className="text-xs font-semibold mb-2">Deliverables:</div>
                        <ul className="space-y-1">
                          {phase.deliverables.map((deliverable, i) => (
                            <li key={i} className="text-xs text-muted-foreground">
                              • {deliverable}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </FloatingCard>
                </ScrollReveal>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Design Assets Section */}
      <section className="py-24">
        <div className="container mx-auto px-6">
          <ScrollReveal>
            <div className="text-center mb-16">
              <h2 className="text-3xl lg:text-4xl font-bold font-display mb-4">
                {designs.title}
              </h2>
              <p className="text-xl text-muted-foreground max-w-2xl mx-auto mb-8">
                {designs.description}
              </p>
              
              {/* Filters */}
              <div className="flex flex-wrap justify-center gap-4 mb-8">
                {/* Device Filter */}
                <div className="flex gap-2 p-1 bg-background/50 backdrop-blur-sm rounded-xl border border-border/50">
                  {(['all', 'mobile', 'tablet', 'desktop'] as const).map((device) => (
                    <button
                      key={device}
                      onClick={() => setSelectedDevice(device)}
                      className={cn(
                        'flex items-center gap-2 px-4 py-2 rounded-lg font-medium text-sm transition-all',
                        selectedDevice === device
                          ? 'bg-primary text-primary-foreground shadow-sm'
                          : 'text-muted-foreground hover:text-foreground hover:bg-accent/50'
                      )}
                    >
                      {device !== 'all' && deviceIcons[device] && (
                        <deviceIcons[device] className="w-4 h-4" />
                      )}
                      {device === 'all' ? 'All Devices' : device.charAt(0).toUpperCase() + device.slice(1)}
                    </button>
                  ))}
                </div>
                
                {/* Type Filter */}
                <div className="flex gap-2 p-1 bg-background/50 backdrop-blur-sm rounded-xl border border-border/50">
                  {(['all', 'wireframe', 'mockup', 'prototype', 'component', 'flow'] as const).map((type) => (
                    <button
                      key={type}
                      onClick={() => setSelectedType(type)}
                      className={cn(
                        'px-4 py-2 rounded-lg font-medium text-sm transition-all',
                        selectedType === type
                          ? 'bg-primary text-primary-foreground shadow-sm'
                          : 'text-muted-foreground hover:text-foreground hover:bg-accent/50'
                      )}
                    >
                      {type === 'all' ? 'All Types' : type.charAt(0).toUpperCase() + type.slice(1)}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </ScrollReveal>

          {/* Asset Grid */}
          <motion.div
            className="grid md:grid-cols-2 lg:grid-cols-3 gap-6"
            layout
          >
            <AnimatePresence>
              {filteredAssets.map((asset, index) => (
                <motion.div
                  key={asset.id}
                  layout
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.8 }}
                  transition={{ duration: 0.3, delay: index * 0.05 }}
                >
                  <FloatingCard 
                    className="group cursor-pointer overflow-hidden bg-background/50 backdrop-blur-sm border border-border/50 hover:border-primary/30"
                    onClick={() => setSelectedAsset(asset)}
                  >
                    <div className="aspect-[4/3] relative overflow-hidden">
                      <Image
                        src={asset.image}
                        alt={asset.title}
                        fill
                        className="object-cover group-hover:scale-105 transition-transform duration-300"
                      />
                      
                      {/* Overlay */}
                      <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center">
                        <div className="text-white text-center">
                          <Eye className="w-8 h-8 mx-auto mb-2" />
                          <div className="font-medium">View Details</div>
                        </div>
                      </div>
                      
                      {/* Device Badge */}
                      {asset.device && (
                        <div className="absolute top-3 left-3 bg-black/70 text-white px-2 py-1 rounded-full text-xs font-medium flex items-center gap-1">
                          {deviceIcons[asset.device] && (
                            <deviceIcons[asset.device] className="w-3 h-3" />
                          )}
                          {asset.device.charAt(0).toUpperCase() + asset.device.slice(1)}
                        </div>
                      )}
                      
                      {/* Type Badge */}
                      <div className="absolute top-3 right-3 bg-primary text-primary-foreground px-2 py-1 rounded-full text-xs font-medium">
                        {asset.type.charAt(0).toUpperCase() + asset.type.slice(1)}
                      </div>
                    </div>
                    
                    <div className="p-4">
                      <h3 className="font-bold mb-2 group-hover:text-primary transition-colors">
                        {asset.title}
                      </h3>
                      {asset.description && (
                        <p className="text-sm text-muted-foreground">
                          {asset.description}
                        </p>
                      )}
                    </div>
                  </FloatingCard>
                </motion.div>
              ))}
            </AnimatePresence>
          </motion.div>
        </div>
      </section>

      {/* Design System Section */}
      {designSystem && (
        <section className="py-24 bg-muted/30">
          <div className="container mx-auto px-6">
            <ScrollReveal>
              <div className="text-center mb-16">
                <h2 className="text-3xl lg:text-4xl font-bold font-display mb-4">
                  Design System
                </h2>
                <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                  A cohesive design language ensuring consistency across all touchpoints
                </p>
              </div>
            </ScrollReveal>

            <div className="max-w-6xl mx-auto space-y-16">
              {/* Colors */}
              <ScrollReveal>
                <FloatingCard className="bg-background/50 backdrop-blur-sm border border-border/50">
                  <div className="p-8">
                    <h3 className="text-2xl font-bold mb-8">Color Palette</h3>
                    <div className="grid md:grid-cols-3 gap-8">
                      <div>
                        <h4 className="font-semibold mb-4 text-primary">Primary Colors</h4>
                        <div className="grid grid-cols-5 gap-2">
                          {designSystem.colors.primary.map((color, index) => (
                            <div key={index} className="aspect-square rounded-lg" style={{ backgroundColor: color }}>
                              <div className="w-full h-full rounded-lg flex items-end justify-center pb-1">
                                <span className="text-xs text-white/90 font-mono">{color}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                      <div>
                        <h4 className="font-semibold mb-4 text-secondary">Secondary Colors</h4>
                        <div className="grid grid-cols-5 gap-2">
                          {designSystem.colors.secondary.map((color, index) => (
                            <div key={index} className="aspect-square rounded-lg" style={{ backgroundColor: color }}>
                              <div className="w-full h-full rounded-lg flex items-end justify-center pb-1">
                                <span className="text-xs text-white/90 font-mono">{color}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                      <div>
                        <h4 className="font-semibold mb-4">Neutral Colors</h4>
                        <div className="grid grid-cols-5 gap-2">
                          {designSystem.colors.neutral.map((color, index) => (
                            <div key={index} className="aspect-square rounded-lg border" style={{ backgroundColor: color }}>
                              <div className="w-full h-full rounded-lg flex items-end justify-center pb-1">
                                <span className="text-xs font-mono">{color}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </FloatingCard>
              </ScrollReveal>

              {/* Typography */}
              <ScrollReveal delay={0.2}>
                <FloatingCard className="bg-background/50 backdrop-blur-sm border border-border/50">
                  <div className="p-8">
                    <h3 className="text-2xl font-bold mb-8">Typography</h3>
                    <div className="space-y-8">
                      <div>
                        <h4 className="font-semibold mb-4">Headings</h4>
                        <div className="space-y-4">
                          <div style={{ fontFamily: designSystem.typography.headings }}>
                            <div className="text-4xl font-bold">The quick brown fox</div>
                            <div className="text-sm text-muted-foreground mt-1">{designSystem.typography.headings} • Bold • 36px</div>
                          </div>
                        </div>
                      </div>
                      <div>
                        <h4 className="font-semibold mb-4">Body Text</h4>
                        <div style={{ fontFamily: designSystem.typography.body }}>
                          <div className="text-base">The quick brown fox jumps over the lazy dog. This sentence contains every letter in the alphabet and demonstrates the typeface at body text size.</div>
                          <div className="text-sm text-muted-foreground mt-1">{designSystem.typography.body} • Regular • 16px</div>
                        </div>
                      </div>
                      <div>
                        <h4 className="font-semibold mb-4">Code</h4>
                        <div style={{ fontFamily: designSystem.typography.code }}>
                          <div className="text-sm font-mono bg-muted p-3 rounded">const greeting = "Hello, World!";</div>
                          <div className="text-sm text-muted-foreground mt-1">{designSystem.typography.code} • Regular • 14px</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </FloatingCard>
              </ScrollReveal>

              {/* Components */}
              <ScrollReveal delay={0.4}>
                <FloatingCard className="bg-background/50 backdrop-blur-sm border border-border/50">
                  <div className="p-8">
                    <h3 className="text-2xl font-bold mb-8">Component Library</h3>
                    <div className="grid md:grid-cols-2 gap-6">
                      {designSystem.components.map((component, index) => (
                        <div key={component.name} className="p-6 border border-border/50 rounded-xl">
                          <div className="flex justify-between items-start mb-3">
                            <h4 className="font-semibold">{component.name}</h4>
                            <span className="text-xs bg-primary/10 text-primary px-2 py-1 rounded-full">
                              {component.variants} variant{component.variants !== 1 ? 's' : ''}
                            </span>
                          </div>
                          <p className="text-sm text-muted-foreground mb-3">
                            {component.description}
                          </p>
                          <div className="text-xs text-muted-foreground">
                            <strong>Usage:</strong> {component.usage}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </FloatingCard>
              </ScrollReveal>
            </div>
          </div>
        </section>
      )}

      {/* Testing/Validation Section */}
      {testing && (
        <section className="py-24">
          <div className="container mx-auto px-6">
            <ScrollReveal>
              <div className="text-center mb-16">
                <h2 className="text-3xl lg:text-4xl font-bold font-display mb-4">
                  {testing.title}
                </h2>
                <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                  {testing.description}
                </p>
              </div>
            </ScrollReveal>

            <div className="max-w-6xl mx-auto">
              {/* Testing Methods */}
              <ScrollReveal delay={0.2}>
                <div className="mb-12">
                  <h3 className="text-2xl font-bold text-center mb-8">Testing Methods</h3>
                  <div className="flex flex-wrap justify-center gap-4">
                    {testing.methods.map((method) => (
                      <div key={method} className="px-4 py-2 bg-primary/10 text-primary rounded-full border border-primary/20 font-medium">
                        {method}
                      </div>
                    ))}
                  </div>
                </div>
              </ScrollReveal>

              {/* Results */}
              <div className="grid md:grid-cols-3 gap-8">
                {testing.results.map((result, index) => (
                  <ScrollReveal key={result.metric} delay={index * 0.1}>
                    <FloatingCard className="text-center bg-gradient-to-br from-green-500 to-emerald-600 text-white">
                      <div className="p-6">
                        <div className="text-3xl font-bold mb-2">{result.improvement}</div>
                        <div className="text-lg font-semibold mb-3">{result.metric}</div>
                        <div className="text-sm opacity-90">{result.description}</div>
                      </div>
                    </FloatingCard>
                  </ScrollReveal>
                ))}
              </div>
            </div>
          </div>
        </section>
      )}

      {/* Asset Modal */}
      <AnimatePresence>
        {selectedAsset && (
          <motion.div
            className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setSelectedAsset(null)}
          >
            <motion.div
              className="bg-background rounded-2xl max-w-4xl max-h-[90vh] overflow-hidden"
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              onClick={(e) => e.stopPropagation()}
            >
              {/* Modal Header */}
              <div className="flex items-center justify-between p-6 border-b border-border">
                <div>
                  <h3 className="text-xl font-bold">{selectedAsset.title}</h3>
                  <div className="flex items-center gap-2 mt-1">
                    <span className="text-xs bg-primary/10 text-primary px-2 py-1 rounded-full">
                      {selectedAsset.type}
                    </span>
                    {selectedAsset.device && (
                      <span className="text-xs bg-muted text-muted-foreground px-2 py-1 rounded-full">
                        {selectedAsset.device}
                      </span>
                    )}
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setSelectedAsset(null)}
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>
              
              {/* Modal Content */}
              <div className="p-6 max-h-[70vh] overflow-y-auto">
                <div className="relative mb-6">
                  <Image
                    src={selectedAsset.image}
                    alt={selectedAsset.title}
                    width={800}
                    height={600}
                    className="w-full h-auto rounded-lg"
                  />
                  
                  {/* Annotations */}
                  {selectedAsset.annotations?.map((annotation, index) => (
                    <motion.div
                      key={index}
                      className="absolute w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold cursor-pointer"
                      style={{
                        left: `${annotation.x}%`,
                        top: `${annotation.y}%`,
                        transform: 'translate(-50%, -50%)'
                      }}
                      whileHover={{ scale: 1.2 }}
                      title={`${annotation.title}: ${annotation.description}`}
                    >
                      {index + 1}
                    </motion.div>
                  ))}
                </div>
                
                {selectedAsset.description && (
                  <p className="text-muted-foreground mb-4">
                    {selectedAsset.description}
                  </p>
                )}
                
                {/* Annotations List */}
                {selectedAsset.annotations && selectedAsset.annotations.length > 0 && (
                  <div className="space-y-3">
                    <h4 className="font-semibold">Annotations:</h4>
                    {selectedAsset.annotations.map((annotation, index) => (
                      <div key={index} className="flex gap-3 p-3 bg-muted/50 rounded-lg">
                        <div className="w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0">
                          {index + 1}
                        </div>
                        <div>
                          <div className="font-medium mb-1">{annotation.title}</div>
                          <div className="text-sm text-muted-foreground">{annotation.description}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}

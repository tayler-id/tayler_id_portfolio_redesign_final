'use client'

import React, { useState, useEffect, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  X, 
  Maximize2, 
  Minimize2, 
  RefreshCw, 
  ArrowLeft, 
  ArrowRight, 
  Home, 
  Shield, 
  Wifi,
  Volume2,
  Battery,
  Monitor,
  Smartphone,
  Tablet,
  ExternalLink,
  Play,
  Pause,
  Square,
  Download,
  Share2,
  Code,
  Eye,
  Settings
} from 'lucide-react'
import { ScrollReveal } from './animate-ui/scroll-reveal'
import { FloatingCard } from './animate-ui/floating-card'
import { MagneticButton } from './animate-ui/magnetic-button'
import { Button } from './ui/button'
import { cn } from '@/lib/utils'

interface DemoFeature {
  icon: React.ComponentType<any>
  title: string
  description: string
}

interface TechStack {
  category: string
  technologies: Array<{
    name: string
    version?: string
    purpose: string
  }>
}

interface DemoCredentials {
  title: string
  credentials: Array<{
    label: string
    value: string
    type: 'username' | 'password' | 'email' | 'api-key' | 'other'
  }>
  instructions?: string[]
}

interface ReactAppDemoProps {
  // Demo metadata
  title: string
  subtitle: string
  description: string
  demoUrl: string
  repositoryUrl?: string
  
  // Demo configuration
  defaultDevice?: 'desktop' | 'tablet' | 'mobile'
  allowDeviceSwitching?: boolean
  requiresServer?: boolean
  serverStatus?: 'online' | 'offline' | 'checking'
  
  // Demo features
  features: DemoFeature[]
  
  // Technical details
  techStack: TechStack[]
  
  // Demo credentials/access
  credentials?: DemoCredentials
  
  // Demo controls
  allowFullscreen?: boolean
  showBrowserChrome?: boolean
  showSourceCode?: boolean
  
  // Callbacks
  onClose: () => void
  onOpenExternal?: () => void
  onShowSource?: () => void
}

export function ReactAppDemoTemplate(props: ReactAppDemoProps) {
  const {
    title,
    subtitle,
    description,
    demoUrl,
    repositoryUrl,
    defaultDevice = 'desktop',
    allowDeviceSwitching = true,
    requiresServer = false,
    serverStatus = 'online',
    features,
    techStack,
    credentials,
    allowFullscreen = true,
    showBrowserChrome = true,
    showSourceCode = true,
    onClose,
    onOpenExternal,
    onShowSource
  } = props
  const [isFullscreen, setIsFullscreen] = useState(false)
  const [currentDevice, setCurrentDevice] = useState(defaultDevice)
  const [isLoading, setIsLoading] = useState(true)
  const [currentUrl, setCurrentUrl] = useState(demoUrl)
  const [showCredentials, setShowCredentials] = useState(false)
  const [isPlaying, setIsPlaying] = useState(true)
  const iframeRef = useRef<HTMLIFrameElement>(null)

  const devices = {
    desktop: { width: '100%', height: '100%', icon: Monitor },
    tablet: { width: '768px', height: '1024px', icon: Tablet },
    mobile: { width: '375px', height: '667px', icon: Smartphone }
  }

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false)
    }, 2000)
    return () => clearTimeout(timer)
  }, [currentUrl])

  const refreshDemo = () => {
    setIsLoading(true)
    if (iframeRef.current) {
      iframeRef.current.src = iframeRef.current.src
    }
  }

  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen)
  }

  const getCurrentTime = () => {
    return new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
  }

  return (
    <AnimatePresence>
      <motion.div
        className="fixed inset-0 bg-black/90 z-50 flex items-center justify-center p-4"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        onClick={onClose}
      >
        <motion.div
          className={cn(
            'bg-background rounded-2xl overflow-hidden shadow-2xl',
            isFullscreen ? 'w-full h-full' : 'w-[95vw] h-[95vh] max-w-[1400px]'
          )}
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.8, opacity: 0 }}
          onClick={(e) => e.stopPropagation()}
        >
          {/* Demo Header */}
          <div className="bg-muted/50 border-b border-border/50 p-4">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h2 className="text-2xl font-bold font-display">{title}</h2>
                <p className="text-muted-foreground">{subtitle}</p>
              </div>
              <div className="flex items-center gap-2">
                {/* Server Status */}
                {requiresServer && (
                  <div className={cn(
                    'flex items-center gap-2 px-3 py-1 rounded-full text-xs font-medium',
                    serverStatus === 'online' && 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400',
                    serverStatus === 'offline' && 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400',
                    serverStatus === 'checking' && 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-400'
                  )}>
                    <div className={cn(
                      'w-2 h-2 rounded-full',
                      serverStatus === 'online' && 'bg-green-500 animate-pulse',
                      serverStatus === 'offline' && 'bg-red-500',
                      serverStatus === 'checking' && 'bg-yellow-500 animate-pulse'
                    )} />
                    Server {serverStatus}
                  </div>
                )}

                {/* Demo Controls */}
                <div className="flex items-center gap-1 bg-background/50 rounded-lg p-1">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setIsPlaying(!isPlaying)}
                    title={isPlaying ? 'Pause Demo' : 'Resume Demo'}
                  >
                    {isPlaying ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={refreshDemo}
                    title="Refresh Demo"
                  >
                    <RefreshCw className="w-4 h-4" />
                  </Button>
                  {allowFullscreen && (
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={toggleFullscreen}
                      title={isFullscreen ? 'Exit Fullscreen' : 'Fullscreen'}
                    >
                      {isFullscreen ? <Minimize2 className="w-4 h-4" /> : <Maximize2 className="w-4 h-4" />}
                    </Button>
                  )}
                </div>

                <Button variant="ghost" size="sm" onClick={onClose}>
                  <X className="w-4 h-4" />
                </Button>
              </div>
            </div>

            {/* Demo Info & Controls */}
            <div className="flex items-center justify-between gap-4">
              <div className="flex-1">
                <p className="text-sm text-muted-foreground">{description}</p>
              </div>

              <div className="flex items-center gap-4">
                {/* Device Switcher */}
                {allowDeviceSwitching && (
                  <div className="flex gap-1 bg-background/50 rounded-lg p-1">
                    {(Object.keys(devices) as Array<keyof typeof devices>).map((device) => {
                      const DeviceIcon = devices[device].icon
                      return (
                        <Button
                          key={device}
                          variant={currentDevice === device ? 'default' : 'ghost'}
                          size="sm"
                          onClick={() => setCurrentDevice(device)}
                          title={`${device.charAt(0).toUpperCase() + device.slice(1)} view`}
                        >
                          <DeviceIcon className="w-4 h-4" />
                        </Button>
                      )
                    })}
                  </div>
                )}

                {/* Action Buttons */}
                <div className="flex gap-2">
                  {credentials && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setShowCredentials(true)}
                    >
                      <Shield className="w-4 h-4 mr-2" />
                      Credentials
                    </Button>
                  )}
                  
                  {onOpenExternal && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={onOpenExternal}
                    >
                      <ExternalLink className="w-4 h-4 mr-2" />
                      Open External
                    </Button>
                  )}
                  
                  {showSourceCode && onShowSource && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={onShowSource}
                    >
                      <Code className="w-4 h-4 mr-2" />
                      Source
                    </Button>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Browser Chrome */}
          <div className="flex flex-col h-full">
            {showBrowserChrome && (
              <div className="bg-muted/30 border-b border-border/50 px-4 py-2">
                {/* Browser Controls */}
                <div className="flex items-center gap-4">
                  {/* Traffic Lights */}
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                    <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                  </div>

                  {/* Navigation */}
                  <div className="flex items-center gap-1">
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0" disabled>
                      <ArrowLeft className="w-4 h-4" />
                    </Button>
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0" disabled>
                      <ArrowRight className="w-4 h-4" />
                    </Button>
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0" onClick={refreshDemo}>
                      <RefreshCw className="w-4 h-4" />
                    </Button>
                  </div>

                  {/* Address Bar */}
                  <div className="flex-1 flex items-center gap-2">
                    <div className="flex-1 bg-background/50 rounded-lg px-3 py-1 flex items-center gap-2 border border-border/50">
                      <Shield className="w-4 h-4 text-green-500" />
                      <span className="text-sm text-muted-foreground font-mono">
                        {currentUrl}
                      </span>
                    </div>
                  </div>

                  {/* System Tray */}
                  <div className="flex items-center gap-2 text-muted-foreground">
                    <Wifi className="w-4 h-4" />
                    <Volume2 className="w-4 h-4" />
                    <Battery className="w-4 h-4" />
                    <span className="text-sm font-mono">{getCurrentTime()}</span>
                  </div>
                </div>
              </div>
            )}

            {/* Demo Content */}
            <div className="flex-1 relative bg-white">
              {isLoading && (
                <div className="absolute inset-0 bg-background/50 flex items-center justify-center z-10">
                  <div className="text-center">
                    <div className="w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-3"></div>
                    <div className="text-sm text-muted-foreground">Loading demo...</div>
                  </div>
                </div>
              )}

              {/* Demo Viewport */}
              <div className="w-full h-full flex items-center justify-center p-4">
                <div 
                  className="bg-white shadow-2xl rounded-lg overflow-hidden border border-border/20 transition-all duration-300"
                  style={{
                    width: currentDevice === 'desktop' ? '100%' : devices[currentDevice].width,
                    height: currentDevice === 'desktop' ? '100%' : devices[currentDevice].height,
                    maxWidth: '100%',
                    maxHeight: '100%'
                  }}
                >
                  <iframe
                    ref={iframeRef}
                    src={currentUrl}
                    className="w-full h-full border-0"
                    title={`${title} Demo`}
                    sandbox="allow-scripts allow-same-origin allow-forms allow-popups"
                    loading="lazy"
                  />
                </div>
              </div>

              {/* Demo Features Overlay */}
              {!isLoading && features.length > 0 && (
                <div className="absolute top-4 right-4 z-20">
                  <FloatingCard className="bg-background/95 backdrop-blur-sm border border-border/50 p-4 max-w-sm">
                    <h3 className="font-semibold mb-3 flex items-center gap-2">
                      <Eye className="w-4 h-4" />
                      Demo Features
                    </h3>
                    <div className="space-y-2">
                      {features.slice(0, 3).map((feature, index) => (
                        <div key={index} className="flex items-start gap-2">
                          <feature.icon className="w-4 h-4 text-primary mt-0.5 flex-shrink-0" />
                          <div>
                            <div className="text-sm font-medium">{feature.title}</div>
                            <div className="text-xs text-muted-foreground">{feature.description}</div>
                          </div>
                        </div>
                      ))}
                      {features.length > 3 && (
                        <div className="text-xs text-muted-foreground pt-1">
                          +{features.length - 3} more features
                        </div>
                      )}
                    </div>
                  </FloatingCard>
                </div>
              )}
            </div>

            {/* Demo Footer */}
            <div className="bg-muted/30 border-t border-border/50 px-4 py-2">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4 text-sm text-muted-foreground">
                  <span>Interactive Demo</span>
                  {techStack.length > 0 && (
                    <>
                      <div className="w-1 h-1 bg-muted-foreground rounded-full"></div>
                      <span>Built with {techStack[0].technologies.slice(0, 2).map(tech => tech.name).join(', ')}</span>
                    </>
                  )}
                </div>
                
                <div className="flex items-center gap-2">
                  <div className="flex items-center gap-1 text-xs text-muted-foreground">
                    <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                    Live Demo
                  </div>
                </div>
              </div>
            </div>
          </div>
        </motion.div>

        {/* Credentials Modal */}
        <AnimatePresence>
          {showCredentials && credentials && (
            <motion.div
              className="absolute inset-0 bg-black/50 flex items-center justify-center p-4"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setShowCredentials(false)}
            >
              <motion.div
                className="bg-background rounded-2xl p-6 max-w-md w-full"
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.8, opacity: 0 }}
                onClick={(e) => e.stopPropagation()}
              >
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">{credentials.title}</h3>
                  <Button variant="ghost" size="sm" onClick={() => setShowCredentials(false)}>
                    <X className="w-4 h-4" />
                  </Button>
                </div>
                
                <div className="space-y-4">
                  {credentials.credentials.map((cred, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
                      <div className="text-sm font-medium">{cred.label}:</div>
                      <div className="text-sm font-mono bg-background px-2 py-1 rounded border">
                        {cred.type === 'password' ? '••••••••' : cred.value}
                      </div>
                    </div>
                  ))}
                </div>
                
                {credentials.instructions && (
                  <div className="mt-4 pt-4 border-t border-border/50">
                    <div className="text-sm font-medium mb-2">Instructions:</div>
                    <ul className="text-sm text-muted-foreground space-y-1">
                      {credentials.instructions.map((instruction, index) => (
                        <li key={index}>• {instruction}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>
    </AnimatePresence>
  )
}